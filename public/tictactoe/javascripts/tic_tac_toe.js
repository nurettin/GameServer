/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash = Opal.hash;

  Opal.add_stubs(['$attr_accessor', '$reset!', '$*', '$!', '$==', '$<', '$>', '$[]', '$reduce', '$+', '$&', '$zip', '$any?', '$check_win_condition', '$valid_move?', '$nil?', '$raise', '$[]=', '$end_game?', '$call']);
  return (function($base, $super) {
    function $TicTacToe(){};
    var self = $TicTacToe = $klass($base, $super, 'TicTacToe', $TicTacToe);

    var def = self.$$proto, $scope = self.$$scope;

    def.current_player = def.field = def.moves = def.endgames = def.cb_win = def.cb_turn = nil;
    self.$attr_accessor("field");

    self.$attr_accessor("current_player");

    self.$attr_accessor("cb_turn");

    self.$attr_accessor("cb_win");

    def.$initialize = function() {
      var self = this;

      return self['$reset!']();
    };

    def['$reset!'] = function() {
      var self = this;

      self.current_player = 1;
      self.field = [0]['$*'](9);
      self.moves = $hash(1, [0]['$*'](9), 2, [0]['$*'](9));
      return self.endgames = [[1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 0, 1, 0, 1, 0, 0]];
    };

    def['$valid_move?'] = function(player, index) {
      var $a, $b, self = this;

      if ((($a = player['$=='](self.current_player)['$!']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "Not your turn"};
      if ((($a = ((($b = index['$<'](0)) !== false && $b !== nil) ? $b : index['$>'](8))) !== nil && (!$a.$$is_boolean || $a == true))) {
        return "Index out of bounds"};
      if (self.field['$[]'](index)['$=='](0)) {
        return nil
        } else {
        return "Place full"
      };
    };

    def.$check_win_condition = function(endgame) {
      var $a, $b, TMP_1, self = this;

      return ($a = ($b = self.moves['$[]'](self.current_player).$zip(endgame)).$reduce, $a.$$p = (TMP_1 = function(r, z){var self = TMP_1.$$s || this;
if (r == null) r = nil;if (z == null) z = nil;
      return r = r['$+'](z['$[]'](0)['$&'](z['$[]'](1)))}, TMP_1.$$s = self, TMP_1), $a).call($b, 0)['$>'](2);
    };

    def['$end_game?'] = function() {
      var $a, $b, TMP_2, self = this;

      return ($a = ($b = self.endgames)['$any?'], $a.$$p = (TMP_2 = function(e){var self = TMP_2.$$s || this;
if (e == null) e = nil;
      return self.$check_win_condition(e)}, TMP_2.$$s = self, TMP_2), $a).call($b);
    };

    return (def.$play = function(player, index) {
      var $a, self = this, error = nil;

      error = self['$valid_move?'](player, index);
      if ((($a = error['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise(error)
      };
      self.field['$[]='](index, self.current_player);
      self.moves['$[]'](self.current_player)['$[]='](index, 1);
      if ((($a = self['$end_game?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        if ((($a = self.cb_win['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.cb_win.$call(self.current_player)
        };
        return nil;};
      self.current_player = self.current_player['$+'](1);
      if (self.current_player['$>'](2)) {
        self.current_player = 1};
      if ((($a = self.cb_turn['$nil?']()) !== nil && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.cb_turn.$call(self.current_player)
      };
    }, nil) && 'play';
  })(self, null)
})(Opal);

/* Generated by Opal 0.7.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$exit']);
  return $scope.get('Kernel').$exit()
})(Opal);
